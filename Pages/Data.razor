@page "/Data"

@using WebDoAn.Data
@using WebDoAn.Interfaces
@using WebDoAn.Models
@using WebDoAn.Services
@using BlazorDownloadFile;
@inject IWaterService _waterService
@inject WeatherForecastService ForecastService


<h1>Bảng Số Liệu Chất Lượng Nguồn Nước Thải Công Nghiệp</h1>

<p>This component demonstrates fetching data from a service.</p>
<button class="btn btn-primary" @onclick="@(() => { showFileExportModal = true; })">Xuất file</button>
<button class="btn btn-primary" @onclick="@(() => { showStatisticalModal = true; })">Thống kê</button>
@if (waters == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Độ Đục. (NTU)</th>
                <th>Nhiệt Độ. (C)</th>
                <th>Nhiệt Độ. (F)</th>
                <th>pH. </th>
                <th>Lưu Lượng. (m3)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var water in waters)
            {
                <tr>
                    <td>@water.Time.ToString("dd/MM/yyyy HH:mm")</td>
                    <td>@water.Turbidity</td>
                    <td>@water.Temperature</td>
                    <td>@string.Format("{0:0.00}", double.Parse(water.TemperatureF))</td>
                    <td>@water.PH</td>
                    <td>@water.Waterflow</td>

                </tr>
            }
        </tbody>
    </table>
}
@if (showFileExportModal || showStatisticalModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">

                    @if (showFileExportModal)
                    {
                        <h5 class="modal-title">Xuất file</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="@(() => { showFileExportModal = false; })">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    }
                    @if (showStatisticalModal)
                    {
                        <h5 class="modal-title">Thống kê</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="@(() => { showStatisticalModal = false;showStatistical = false; })">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    }
                </div>
                <div class="modal-body">
                    @if (showFileExportModal)
                    {

                        <label>Từ ngày</label>
                        <input style="width:30%" type="date" @bind="@startDate" max="@endDate.ToString("yyyy-MM-dd")">
                        <label>Đến ngày</label>
                        <input style="width:30%" type="date" @bind="@endDate" min="@startDate.ToString("yyyy-MM-dd")">


                    }
                    @if (showStatisticalModal)
                    {
                        <label>Chọn ngày</label>
                        <input style="width:30%" type="date" @bind="@statisticalDate">

                        @if (showStatistical)
                        {
                            foreach (var warning in warnings)
                            {
                                <p>Từ @warning.startTime đến @warning.endTime : @warning.Message</p>
                                
                            }
                            <strong>Tổng lượng nước : @TotalWaterflow</strong>
                        }
                    }
                </div>
                <div class="modal-footer">
                    @if (showFileExportModal)
                    {
                        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="@(() => { showFileExportModal = false; })">Hủy</button>
                        <button type="button" class="btn btn-primary" @onclick="FileExport">Xuất</button>
                    }
                    @if (showStatisticalModal)
                    {
                        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="@(() => { showStatisticalModal = false; showStatistical = false; })">Hủy</button>
                        <button type="button" class="btn btn-primary" @onclick="StatisticalDateChange">Thống Kê</button>

                        <button type="button" class="btn btn-primary" @onclick="StatisticalExport">Xuất Thống Kê</button>
                    }

                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}


@code {
    [Inject] public IBlazorDownloadFileService BlazorDownloadFileService { get; set; }
    bool showFileExportModal = false;
    bool showStatisticalModal = false;
    bool showStatistical = false;
    IList<WaterData> waters;
    List<Warning> warnings;
    double TotalWaterflow =0;

    DateTime startDate = DateTime.Today;
    DateTime endDate = DateTime.Today;
    DateTime statisticalDate;


    protected override void OnInitialized()
    {
        // Subscription to table record change events
        this._waterService.OnWaterChanged += this.WaterChanged;
        this.waters = this._waterService.GetCurrentWater();
        waters = waters.OrderByDescending(c => c.Time).Take(10).ToList();
        statisticalDate = DateTime.Today;
    }

    private async void WaterChanged(object sender, WaterChangeEventArgs args)
    {
        var recordToupdate = this.waters.FirstOrDefault(x => x.ID == args.NewWater.ID);

        if (recordToupdate == null)
        {
            this.waters.Add(args.NewWater);
            waters = waters.OrderByDescending(c => c.Time).Take(10).ToList();
        }
        else
        {
            recordToupdate.Waterflow = args.NewWater.Waterflow;
            recordToupdate.Temperature = args.NewWater.Temperature;
            recordToupdate.PH = args.NewWater.PH;
            recordToupdate.Turbidity = args.NewWater.Turbidity;

        }
        await InvokeAsync(() =>
        {
            base.StateHasChanged();
        });
    }

    public void Dispose()
    {
        this._waterService.OnWaterChanged -= this.WaterChanged;
    }

    public async Task FileExport()
    {
        var listWater = _waterService.GetWater(startDate, endDate).OrderByDescending(c => c.Time).ToList();

        var buildler = new System.Text.StringBuilder();
        buildler.AppendLine("Time,MessageId,Temperature,TemperatureF,Turbidity,pH,WaterFlow");
        foreach (var water in listWater)
        {
            buildler.AppendLine($"{water.Time.ToString("dd/MM/yyyy HH:mm:ss")},{water.MessageId},{water.Temperature},{water.TemperatureF},{water.Turbidity},{water.PH},{water.Waterflow}");
        }
        await BlazorDownloadFileService.DownloadFileFromText($"water{startDate.ToString("dd-MM-yyyy")}to{endDate.ToString("dd-MM-yyyy")}.csv", buildler.ToString(), "text/csv");
    }
    //export file
    public async Task StatisticalExport()
    {
        StatisticalCal();
        var buildler = new System.Text.StringBuilder();
        buildler.AppendLine("startTime,endTime,Message");
        foreach (var warning in warnings)
        {
            buildler.AppendLine($"{warning.startTime.ToString("dd/MM/yyyy HH:mm:ss")},{warning.endTime.ToString("dd/MM/yyyy HH:mm:ss")},{warning.Message}");
        }
        buildler.AppendLine($"Waterflow total : {TotalWaterflow}");
        await BlazorDownloadFileService.DownloadFileFromText($"waterStatistical{statisticalDate.ToString("dd-MM-yyyy")}.csv", buildler.ToString(), "text/csv", true);
    }

    public void StatisticalDateChange()
    {
        StatisticalCal();
        showStatistical = true;
    }

    public void StatisticalCal()
    {
        var listWater = _waterService.GetWater(statisticalDate, statisticalDate).ToList();
        warnings = new List<Warning>();
        TotalWaterflow = 0;
        foreach (var water in listWater)
        {
            TotalWaterflow += double.Parse(water.Waterflow);
        }

        for (int i = 0; i < listWater.Count; i++)
        {
            if(int.Parse(listWater[i].PH) >= 8)
            {
                Warning warningItem = new Warning
                {
                    startTime = listWater[i].Time,
                    endTime = listWater[i].Time,
                    Message = "pH >=8 Chỉ số vượt quá mức quy định"
                };
                for (int j = i + 1; j < listWater.Count; j++)
                {
                    if(int.Parse(listWater[j].PH) < 8 || j == listWater.Count-1)
                    {
                        warningItem.endTime = listWater[j-1].Time;
                        i = j - 1;
                        break;
                    }
                }
                warnings.Add(warningItem);
            }
            else if(int.Parse(listWater[i].PH) <= 4)
            {
                Warning warningItem = new Warning
                {
                    startTime = listWater[i].Time,
                    endTime = listWater[i].Time,
                    Message = "pH <= 4 Chỉ số vượt tiêu chuẩn cho phép"
                };
                for (int j = i + 1; j < listWater.Count; j++)
                {
                    if (int.Parse(listWater[j].PH) > 4 || j == listWater.Count - 1)
                    {
                        warningItem.endTime = listWater[j-1].Time;
                        i = j - 1;
                        break;
                    }
                }
                warnings.Add(warningItem);

            }
        }
    }
}
